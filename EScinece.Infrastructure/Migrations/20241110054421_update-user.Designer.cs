// <auto-generated />
using System;
using EScinece.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EScinece.Infrastructure.Migrations
{
    [DbContext(typeof(EScienceDbContext))]
    [Migration("20241110054421_update-user")]
    partial class updateuser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.2.24474.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EScinece.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("Role")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Account");
                });

            modelBuilder.Entity("EScinece.Domain.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("EScinece.Domain.Entities.ArticleBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CreatorId");

                    b.ToTable("ArticleBranch");
                });

            modelBuilder.Entity("EScinece.Domain.Entities.ArticleBranchVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArticleBranchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArticleBranchId");

                    b.HasIndex("CreatorId");

                    b.ToTable("ArticleBranchVersion");
                });

            modelBuilder.Entity("EScinece.Domain.Entities.ArticleParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ArticleId1")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ArticleId")
                        .IsUnique();

                    b.HasIndex("ArticleId1");

                    b.ToTable("ArticleParticipant");
                });

            modelBuilder.Entity("EScinece.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("EScinece.Domain.Entities.Account", b =>
                {
                    b.HasOne("EScinece.Domain.Entities.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("EScinece.Domain.Entities.Account", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EScinece.Domain.Entities.ArticleBranch", b =>
                {
                    b.HasOne("EScinece.Domain.Entities.Article", "Article")
                        .WithMany("ArticleBranches")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EScinece.Domain.Entities.ArticleParticipant", "Creator")
                        .WithMany("ArticleBranches")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("EScinece.Domain.Entities.ArticleBranchVersion", b =>
                {
                    b.HasOne("EScinece.Domain.Entities.ArticleBranch", "ArticleBranch")
                        .WithMany("ArticleBranchVersions")
                        .HasForeignKey("ArticleBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EScinece.Domain.Entities.ArticleParticipant", "Creator")
                        .WithMany("ArticleBranchVersions")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArticleBranch");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("EScinece.Domain.Entities.ArticleParticipant", b =>
                {
                    b.HasOne("EScinece.Domain.Entities.Account", "Account")
                        .WithMany("ArticleParticipants")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EScinece.Domain.Entities.Article", "Article")
                        .WithOne("Creator")
                        .HasForeignKey("EScinece.Domain.Entities.ArticleParticipant", "ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EScinece.Domain.Entities.Article", null)
                        .WithMany("ArticleParticipants")
                        .HasForeignKey("ArticleId1");

                    b.Navigation("Account");

                    b.Navigation("Article");
                });

            modelBuilder.Entity("EScinece.Domain.Entities.Account", b =>
                {
                    b.Navigation("ArticleParticipants");
                });

            modelBuilder.Entity("EScinece.Domain.Entities.Article", b =>
                {
                    b.Navigation("ArticleBranches");

                    b.Navigation("ArticleParticipants");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("EScinece.Domain.Entities.ArticleBranch", b =>
                {
                    b.Navigation("ArticleBranchVersions");
                });

            modelBuilder.Entity("EScinece.Domain.Entities.ArticleParticipant", b =>
                {
                    b.Navigation("ArticleBranchVersions");

                    b.Navigation("ArticleBranches");
                });

            modelBuilder.Entity("EScinece.Domain.Entities.User", b =>
                {
                    b.Navigation("Account");
                });
#pragma warning restore 612, 618
        }
    }
}
